name: Rules Converter

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  convert-rules:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: src
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq curl
          pip3 install pyyaml
          
          DOWNLOAD_URL="https://github.com/MetaCubeX/mihomo/releases/download/v1.19.3/mihomo-linux-amd64-v1.19.3.gz"
          echo "Download URL: $DOWNLOAD_URL"
          
          # Download mihomo
          if curl -fL "$DOWNLOAD_URL" -o mihomo.gz; then
            echo "Download completed, verifying..."
            
            # Verify and install
            if gzip -t mihomo.gz 2>/dev/null; then
              gzip -d mihomo.gz
              if [ -f mihomo ] && [ -s mihomo ]; then
                chmod +x mihomo
                sudo mv mihomo /usr/local/bin/
                echo "Successfully installed mihomo"
              else
                echo "Error: Decompressed file is missing or empty"
                exit 1
              fi
            else
              echo "Error: Downloaded file is corrupted"
              exit 1
            fi
          else
            echo "Error: Failed to download mihomo"
            exit 1
          fi
          
          mkdir -p src/{ipcidr,domain}

      - name: Process Rules
        run: |
          cd src

          # Create YAML processing script
          cat > process_yaml.py << 'EOL'
#!/usr/bin/env python3
import yaml
import sys

def process_yaml(file_path):
    try:
        with open(file_path) as f:
            data = yaml.safe_load(f)
            if isinstance(data, dict) and 'payload' in data:
                return '\n'.join(data['payload'])
            else:
                print(f"Error: Invalid YAML structure in {file_path}", file=sys.stderr)
                return None
    except Exception as e:
        print(f"Error processing YAML {file_path}: {e}", file=sys.stderr)
        return None

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: process_yaml.py <yaml_file>", file=sys.stderr)
        sys.exit(1)
    
    result = process_yaml(sys.argv[1])
    if result:
        print(result)
        sys.exit(0)
    sys.exit(1)
EOL
          chmod +x process_yaml.py

          download_and_process() {
            local rule="$1"
            local url="$2"
            local max_retries=3
            local retry_delay=5
            
            echo "ðŸ”„ Processing: $rule"
            
            for attempt in $(seq 1 $max_retries); do
              echo "Download attempt $attempt of $max_retries: $url"
              
              if curl -sfL --connect-timeout 10 --max-time 30 -o "${rule}.origin" "$url"; then
                if [[ "$url" == *.yaml ]]; then
                  if python3 process_yaml.py "${rule}.origin" > "${rule}.tmp"; then
                    rm -f "${rule}.origin"
                  else
                    echo "::error::YAML processing failed for $rule"
                    rm -f "${rule}.origin" "${rule}.tmp"
                    [ $attempt -lt $max_retries ] && sleep $retry_delay
                    continue
                  fi
                else
                  mv "${rule}.origin" "${rule}.tmp"
                fi

                if [[ "$rule" == ipcidr/* ]]; then
                  if mihomo convert-ruleset ipcidr text "${rule}.tmp" "${rule}.mrs" 2>/dev/null; then
                    rm -f "${rule}.tmp"
                    echo "âœ… Successfully processed IPCIDR rule: $rule"
                    return 0
                  else
                    echo "::error::IPCIDR conversion failed for $rule"
                    rm -f "${rule}.tmp"
                  fi
                else
                  sed -i '
                    /^[[:space:]]*$/d;
                    s/^full://g;
                    s/^DOMAIN-SUFFIX,//g;
                    s/^DOMAIN,//g;
                  ' "${rule}.tmp"

                  if awk '!seen[tolower($0)]++' "${rule}.tmp" | sort -f > "${rule}.processed"; then
                    if mihomo convert-ruleset domain text "${rule}.processed" "${rule}.mrs" 2>/dev/null; then
                      rm -f "${rule}.tmp" "${rule}.processed"
                      echo "âœ… Successfully processed domain rule: $rule"
                      return 0
                    else
                      echo "::error::Domain conversion failed for $rule"
                      rm -f "${rule}.tmp" "${rule}.processed"
                    fi
                  else
                    echo "::error::Failed to process and sort domains for $rule"
                    rm -f "${rule}.tmp" "${rule}.processed"
                  fi
                fi
              else
                echo "::warning::Download failed for $rule (attempt $attempt)"
              fi
              
              [ $attempt -lt $max_retries ] && sleep $retry_delay
            done
            
            echo "::error::Failed to process $rule after $max_retries attempts"
            return 1
          }

          declare -A RULES=(
            ["domain/ai"]="https://github.com/DustinWin/ruleset_geodata/raw/mihomo-ruleset/ai.list"
            ["domain/cn"]="https://github.com/DustinWin/ruleset_geodata/raw/mihomo-ruleset/cn.list"
            ["domain/fake_ip"]="https://github.com/juewuy/ShellCrash/raw/dev/public/fake_ip_filter.list"
            ["domain/private"]="https://github.com/ForestL18/rules-dat/raw/mihomo/geo/domain/private-domain.list"
            ["domain/paypal"]="https://github.com/MetaCubeX/meta-rules-dat/raw/meta/geo/geosite/paypal.yaml"
            ["ipcidr/privateip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/geo/ipcidr/private-ip.list"
            ["ipcidr/cnip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/China-ASN-combined.list"
            ["ipcidr/telegramip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/Telegram-ASN-combined.list"
            ["ipcidr/googleip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/Google-ASN-combined.list"
          )

          # Process rules and track failures
          failed=0
          processed=0
          total=${#RULES[@]}
          
          echo "Starting rule processing at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Total rules to process: $total"
          
          for rule in "${!RULES[@]}"; do
            if download_and_process "$rule" "${RULES[$rule]}"; then
              ((processed++))
              echo "Progress: $processed/$total rules processed"
            else
              ((failed++))
              echo "::error::Failed to process rule: $rule"
            fi
          done

          echo "Processing completed at $(date -u '+%Y-%m-d %H:%M:%S UTC')"
          echo "Successfully processed: $processed rules"
          echo "Failed to process: $failed rules"
          
          [ $failed -eq 0 ] || exit 1

      - name: Commit Changes
        if: success()
        run: |
          cd src
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Create commit message with timestamp and statistics
          commit_msg="chore: Update rules $(date -u '+%Y-%m-d %H:%M:%S UTC')

Processed by: ${{ github.actor }}
Workflow run: ${{ github.run_number }}
"
          
          git add ipcidr/*.mrs domain/*.mrs
          
          if ! git diff-index --quiet HEAD; then
            git commit -m "$commit_msg"
            git push origin HEAD:${{ github.ref }}
            echo "Successfully committed and pushed changes"
          else
            echo "No changes to commit"
          fi

name: Rules Converter

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  convert-rules:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: src
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq curl
          pip3 install pyyaml
          
          MI_VERSION="v1.19.3"
          DOWNLOAD_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MI_VERSION}/mihomo-linux-amd64-${MI_VERSION}.gz"
          CHECKSUM_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MI_VERSION}/checksums.txt"
          
          echo "🔍 Downloading mihomo ${MI_VERSION}"
          if ! curl -fL "$DOWNLOAD_URL" -o mihomo.gz ||
             ! curl -fL "$CHECKSUM_URL" -o checksums.txt; then
            echo "::error::Failed to download mihomo or checksum file"
            exit 1
          fi
          
          echo "🔐 Verifying checksum..."
          if ! sha256sum -c --ignore-missing checksums.txt; then
            echo "::error::Checksum validation failed"
            exit 1
          fi
          
          echo "📦 Installing mihomo..."
          if ! (gzip -dc mihomo.gz > mihomo && chmod +x mihomo && sudo mv mihomo /usr/local/bin/); then
            echo "::error::Installation failed"
            exit 1
          fi
          
          mkdir -p src/{ipcidr,domain}
          rm -f mihomo.gz checksums.txt

      - name: Process Rules
        run: |
          cd src

          cat > process_yaml.py << 'EOL'
#!/usr/bin/env python3
import yaml
import sys

def process_yaml(file_path):
    try:
        with open(file_path) as f:
            data = yaml.safe_load(f)
            if not isinstance(data, dict) or 'payload' not in data:
                raise ValueError("Invalid YAML structure")
            return '\n'.join(filter(None, (line.strip() for line in data.get('payload', []))))
    except Exception as e:
        print(f"Error processing {file_path}: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: process_yaml.py <yaml_file>", file=sys.stderr)
        sys.exit(1)
    print(process_yaml(sys.argv[1]))
EOL
          chmod +x process_yaml.py

          download_and_process() {
            local rule="$1"
            local url="$2"
            local max_retries=3
            local retry_delay=10
            local timeout=20
            local attempt
            
            echo "🔄 Processing: ${rule} (${url})"
            
            for ((attempt=1; attempt<=max_retries; attempt++)); do
              echo "  ⏳ Attempt ${attempt}/${max_retries}"
              
              # Download with timeout and connection limit
              if curl -fgL --connect-timeout 10 --max-time $timeout -o "${rule}.origin" "$url"; then
                # YAML processing
                if [[ "$url" == *.yaml ]]; then
                  if ! python3 process_yaml.py "${rule}.origin" > "${rule}.tmp"; then
                    echo "::error::YAML processing failed for ${rule}"
                    rm -f "${rule}.origin"
                    continue
                  fi
                  rm -f "${rule}.origin"
                else
                  mv "${rule}.origin" "${rule}.tmp"
                fi

                # Rule type processing
                case "$rule" in
                  ipcidr/*)
                    sed -i '/^#/d;/^[[:space:]]*$/d' "${rule}.tmp"
                    if mihomo convert-ruleset ipcidr text "${rule}.tmp" "${rule}.mrs"; then
                      rm -f "${rule}.tmp"
                      echo "✅ IPCIDR success: ${rule}"
                      return 0
                    fi
                    ;;
                  
                  domain/*)
                    sed -i '
                      /^[[:space:]]*$/d;
                      /^#/d;
                      s/^full://g;
                      s/^DOMAIN-SUFFIX,//g;
                      s/^DOMAIN,//g;
                      s/^DOMAIN-KEYWORD,//g;
                    ' "${rule}.tmp"
                    
                    # Convert to lowercase and deduplicate
                    tr '[:upper:]' '[:lower:]' < "${rule}.tmp" | 
                      awk '!seen[$0]++' | 
                      sort -f > "${rule}.processed"
                    
                    if mihomo convert-ruleset domain text "${rule}.processed" "${rule}.mrs"; then
                      rm -f "${rule}.tmp" "${rule}.processed"
                      echo "✅ Domain success: ${rule}"
                      return 0
                    fi
                    ;;
                esac
                
                echo "::warning::Conversion failed for ${rule}"
                rm -f "${rule}.tmp" "${rule}.processed"
              else
                echo "::warning::Download failed for ${rule}"
              fi
              
              [[ $attempt -lt $max_retries ]] && sleep $retry_delay
            done
            
            echo "::error::Failed to process ${rule} after ${max_retries} attempts"
            return 1
          }

          declare -A RULES=(
            ["domain/ai"]="https://github.com/DustinWin/ruleset_geodata/raw/mihomo-ruleset/ai.list"
            ["domain/cn"]="https://github.com/DustinWin/ruleset_geodata/raw/mihomo-ruleset/cn.list"
            ["domain/fake_ip"]="https://github.com/juewuy/ShellCrash/raw/dev/public/fake_ip_filter.list"
            ["domain/private"]="https://github.com/ForestL18/rules-dat/raw/mihomo/geo/domain/private-domain.list"
            ["domain/paypal"]="https://github.com/MetaCubeX/meta-rules-dat/raw/meta/geo/geosite/paypal.yaml"
            ["ipcidr/privateip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/geo/ipcidr/private-ip.list"
            ["ipcidr/cnip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/China-ASN-combined.list"
            ["ipcidr/telegramip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/Telegram-ASN-combined.list"
            ["ipcidr/googleip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/Google-ASN-combined.list"
          )

          failed=0
          start_time=$(date +%s)
          
          for rule in "${!RULES[@]}"; do
            if ! download_and_process "$rule" "${RULES[$rule]}"; then
              ((failed++))
            fi
          done
          
          duration=$(( $(date +%s) - start_time ))
          echo "⌛ Processing completed in ${duration} seconds"
          echo "📊 Total: ${#RULES[@]} | Success: $(( ${#RULES[@]} - failed )) | Failed: ${failed}"
          [[ $failed -ne 0 ]] && exit 1

      - name: Commit Changes
        if: success()
        run: |
          cd src
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Update timestamp format and add emoji
          commit_msg="chore: 📚 Update rules $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          Auto-generated by GitHub Actions
          Runner: ${{ github.run_id }}
          Trigger: ${{ github.event_name }}"
          
          # Ensure we have latest changes before commit
          git pull origin ${{ github.ref_name }} --rebase
          
          if git add ipcidr/*.mrs domain/*.mrs && 
             git diff-index --quiet HEAD || 
             (git commit -m "$commit_msg" && git push); then
            echo "🚀 Successfully updated rules"
          else
            echo "🔄 No changes detected"
          fi

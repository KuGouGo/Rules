name: Rules Converter

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  convert-rules:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: src
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq curl
          pip3 install pyyaml
          
          MI_VERSION="v1.19.3"
          DOWNLOAD_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MI_VERSION}/mihomo-linux-amd64-${MI_VERSION}.gz"
          CHECKSUM_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MI_VERSION}/checksums.txt"
          
          echo "🔍 Downloading mihomo ${MI_VERSION}"
          if ! curl -fL "$DOWNLOAD_URL" -o mihomo.gz ||
             ! curl -fL "$CHECKSUM_URL" -o checksums.txt; then
            echo "::error::Failed to download mihomo or checksum file"
            exit 1
          fi
          
          echo "🔐 Verifying checksum..."
          if ! sha256sum -c --ignore-missing checksums.txt; then
            echo "::error::Checksum validation failed"
            exit 1
          fi
          
          echo "📦 Installing mihomo..."
          if ! (gzip -dc mihomo.gz > mihomo && chmod +x mihomo && sudo mv mihomo /usr/local/bin/); then
            echo "::error::Installation failed"
            exit 1
          fi
          
          mkdir -p src/{ipcidr,domain}
          rm -f mihomo.gz checksums.txt

      - name: Process Rules
        run: |
          cd src

          cat << 'EOL' > process_yaml.py
#!/usr/bin/env python3
import yaml
import sys

def process_yaml(file_path):
    try:
        with open(file_path) as f:
            data = yaml.safe_load(f)
            if not isinstance(data, dict) or 'payload' not in data:
                raise ValueError("Invalid YAML structure")
            return '\n'.join(filter(None, (line.strip() for line in data.get('payload', []))))
    except Exception as e:
        print(f"Error processing {file_path}: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: process_yaml.py <yaml_file>", file=sys.stderr)
        sys.exit(1)
    print(process_yaml(sys.argv[1]))
EOL
          chmod +x process_yaml.py

          # Rest of the script remains the same...

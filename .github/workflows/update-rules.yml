name: Auto Process Rules
on:
  push:
    paths:
      - '*.list'
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_SCRIPT: ".github/scripts/process_rules.py"

jobs:
  process-rules:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Get Sing-box version
        id: singbox-version
        run: |
          VERSION=$(curl -s "https://api.github.com/repos/SagerNet/sing-box/releases/latest" | jq -r '.tag_name')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Cache Sing-box binary
        id: cache-singbox
        uses: actions/cache@v3
        with:
          path: singbox-bin
          key: singbox-${{ steps.singbox-version.outputs.version }}-linux-amd64

      - name: Download Sing-box
        if: steps.cache-singbox.outputs.cache-hit != 'true'
        run: |
          mkdir -p singbox-bin
          wget -qO singbox.tar.gz "https://github.com/SagerNet/sing-box/releases/download/${{ steps.singbox-version.outputs.version }}/sing-box-${{ steps.singbox-version.outputs.clean_version }}-linux-amd64.tar.gz"
          tar -xzf singbox.tar.gz --strip-components=1 -C singbox-bin
          chmod +x singbox-bin/sing-box

      - name: Setup Sing-box PATH
        run: echo "${{ github.workspace }}/singbox-bin" >> $GITHUB_PATH

      - name: Process rule files into directories
        run: |
          python ${{ env.PYTHON_SCRIPT }} . --output-dir .

      - name: Compile JSON files to SRS
        run: |
          find . -maxdepth 2 -name "*.json" -path "./*/.*" -prune -o -name "*.json" -print | while read json_file; do
            if [ -f "$json_file" ]; then
              dir_name=$(dirname "$json_file")
              base_name=$(basename "$json_file" .json)
              srs_file="${dir_name}/${base_name}.srs"
              
              echo "Compiling: $json_file -> $srs_file"
              sing-box rule-set compile --output "$srs_file" "$json_file"
              
              if [ ! -f "$srs_file" ]; then
                echo "Failed to compile: $json_file"
                exit 1
              fi
            fi
          done

      - name: Check for changes and organize
        id: check-changes
        run: |
          for list_file in *.list; do
            if [ -f "$list_file" ]; then
              base_name=$(basename "$list_file" .list)
              if [ -d "$base_name" ]; then
                git add "$base_name/"
              fi
            fi
          done
          
          if git diff --staged --quiet; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            echo "Changed directories:"
            git diff --staged --name-only | cut -d'/' -f1 | sort -u
            
            echo "rule_dirs=$(git diff --staged --name-only | cut -d'/' -f1 | sort -u | tr '\n' ' ')" >> $GITHUB_OUTPUT
          fi

      - name: Create directory structure summary
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "## 📁 Directory Structure" >> structure_summary.md
          echo "" >> structure_summary.md
          echo "\`\`\`" >> structure_summary.md
          echo "repository/" >> structure_summary.md
          
          for list_file in *.list; do
            if [ -f "$list_file" ]; then
              base_name=$(basename "$list_file" .list)
              if [ -d "$base_name" ]; then
                echo "├── $base_name/" >> structure_summary.md
                for file in "$base_name"/*; do
                  if [ -f "$file" ]; then
                    filename=$(basename "$file")
                    if [ "$filename" = "${base_name}.list" ]; then
                      echo "│   ├── $filename  # Processed rules" >> structure_summary.md
                    elif [ "$filename" = "${base_name}.json" ]; then
                      echo "│   ├── $filename  # Sing-box JSON config" >> structure_summary.md
                    elif [ "$filename" = "${base_name}.srs" ]; then
                      echo "│   └── $filename   # Compiled binary ruleset" >> structure_summary.md
                    fi
                  fi
                done
              fi
            fi
          done
          
          for list_file in *.list; do
            if [ -f "$list_file" ]; then
              echo "├── $list_file  # Source file" >> structure_summary.md
            fi
          done
          
          echo "\`\`\`" >> structure_summary.md

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          git pull --rebase --autostash origin main
          
          commit_msg="🤖 Auto-process: Update rule directories

          Updated rule sets: ${{ steps.check-changes.outputs.rule_dirs }}
          
          Each rule set now contains:
          - {name}.list (processed rules)
          - {name}.json (sing-box config)  
          - {name}.srs (compiled binary)"
          
          git commit -m "$commit_msg"
          
          for i in {1..3}; do
            if git push origin main; then
              echo "Push successful"
              break
            else
              echo "Push failed, retrying... ($i/3)"
              sleep 5
              git pull --rebase --autostash origin main
            fi
            
            if [ $i -eq 3 ]; then
              echo "Push failed after 3 attempts"
              exit 1
            fi
          done

      - name: Create processing summary
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "## 🎯 Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Rule Sets Processed:" >> $GITHUB_STEP_SUMMARY
          
          for dir in ${{ steps.check-changes.outputs.rule_dirs }}; do
            if [ -d "$dir" ]; then
              echo "#### \`$dir/\`" >> $GITHUB_STEP_SUMMARY
              if [ -f "$dir/$dir.list" ]; then
                rule_count=$(grep -c "^[^#]" "$dir/$dir.list" 2>/dev/null || echo "0")
                echo "- **Rules**: $rule_count" >> $GITHUB_STEP_SUMMARY
              fi
              echo "- **Files**: \`$dir.list\`, \`$dir.json\`, \`$dir.srs\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "### 📋 File Organization:" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: \`.list\` files in root directory" >> $GITHUB_STEP_SUMMARY  
          echo "- **Output**: Each rule set in its own directory" >> $GITHUB_STEP_SUMMARY
          echo "- **Structure**: \`{name}/{name}.{list,json,srs}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "structure_summary.md" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            cat structure_summary.md >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -rf singbox.tar.gz structure_summary.md

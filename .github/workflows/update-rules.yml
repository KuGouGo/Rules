name: Auto Process Rules
on:
  push:
    paths:
      - 'Rules/rules/*.list'
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_SCRIPT: ".github/scripts/process_rules.py"

jobs:
  process-rules:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Get Sing-box version
        id: singbox-version
        run: |
          VERSION=$(curl -s "https://api.github.com/repos/SagerNet/sing-box/releases/latest" | jq -r '.tag_name')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Cache Sing-box binary
        id: cache-singbox
        uses: actions/cache@v3
        with:
          path: .cache/singbox-bin
          key: singbox-${{ steps.singbox-version.outputs.version }}-linux-amd64

      - name: Download Sing-box
        if: steps.cache-singbox.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache/singbox-bin
          wget -qO .cache/singbox.tar.gz "https://github.com/SagerNet/sing-box/releases/download/${{ steps.singbox-version.outputs.version }}/sing-box-${{ steps.singbox-version.outputs.clean_version }}-linux-amd64.tar.gz"
          tar -xzf .cache/singbox.tar.gz --strip-components=1 -C .cache/singbox-bin
          chmod +x .cache/singbox-bin/sing-box

      - name: Setup Sing-box PATH
        run: echo "${{ github.workspace }}/.cache/singbox-bin" >> $GITHUB_PATH

      - name: Process rule files
        id: process-rules
        run: |
          python ${{ env.PYTHON_SCRIPT }} --rules-dir Rules/rules --output-dir .
          
          if [ $? -eq 0 ]; then
            echo "process_success=true" >> $GITHUB_OUTPUT
          else
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Compile JSON files to SRS
        if: steps.process-rules.outputs.process_success == 'true'
        run: |
          mkdir -p srs
          
          if [ -d "json" ] && [ "$(ls -A json/*.json 2>/dev/null)" ]; then
            compiled_count=0
            failed_count=0
            
            for json_file in json/*.json; do
              if [ -f "$json_file" ]; then
                base_name=$(basename "$json_file" .json)
                srs_file="srs/${base_name}.srs"
                
                echo "Compiling: $json_file -> $srs_file"
                if sing-box rule-set compile --output "$srs_file" "$json_file"; then
                  compiled_count=$((compiled_count + 1))
                else
                  echo "Failed to compile: $json_file"
                  failed_count=$((failed_count + 1))
                fi
              fi
            done
            
            echo "Successfully compiled $compiled_count SRS files"
            if [ $failed_count -gt 0 ]; then
              echo "Failed to compile $failed_count files"
            fi
            echo "srs_count=$compiled_count" >> $GITHUB_OUTPUT
          else
            echo "No JSON files found to compile"
            echo "srs_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes
        id: check-changes
        run: |
          git add Rules/rules/ json/ srs/ 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            rules_count=$(find Rules/rules -name "*.list" -type f 2>/dev/null | wc -l)
            json_count=$(find json -name "*.json" -type f 2>/dev/null | wc -l)
            srs_count=$(find srs -name "*.srs" -type f 2>/dev/null | wc -l)
            
            echo "rules_count=$rules_count" >> $GITHUB_OUTPUT
            echo "json_count=$json_count" >> $GITHUB_OUTPUT
            echo "srs_count=$srs_count" >> $GITHUB_OUTPUT
            
            changed_files=$(git diff --staged --name-only | grep -E '\.(list|json|srs)$' | wc -l)
            echo "changed_files=$changed_files" >> $GITHUB_OUTPUT
            
            rule_names=$(find Rules/rules -name "*.list" -type f -exec basename {} .list \; | sort | tr '\n' ' ')
            echo "rule_names=$rule_names" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          git pull --rebase --autostash origin main || true
          
          commit_msg="🤖 Auto-process: Update rule files

          📊 Processing Summary:
          - Rules: ${{ steps.check-changes.outputs.rules_count }} files (processed in Rules/rules/)
          - JSON configs: ${{ steps.check-changes.outputs.json_count }} files
          - Binary rulesets: ${{ steps.check-changes.outputs.srs_count }} files
          - Total changes: ${{ steps.check-changes.outputs.changed_files }} files
          
          📝 Rule sets: ${{ steps.check-changes.outputs.rule_names }}
          
          📁 Directory structure:
          - Rules/rules/ → Processed .list files
          - json/  → Sing-box JSON configs  
          - srs/   → Compiled binary rulesets"
          
          git commit -m "$commit_msg"
          
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if git push origin main; then
              echo "✅ Push successful"
              break
            else
              retry_count=$((retry_count + 1))
              echo "❌ Push failed, retrying... ($retry_count/$max_retries)"
              if [ $retry_count -lt $max_retries ]; then
                sleep $((retry_count * 2))
                git pull --rebase --autostash origin main || true
              fi
            fi
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "💥 Push failed after $max_retries attempts"
            exit 1
          fi

      - name: Create processing summary
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "## 🎯 Rule Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 File Statistics:" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Count | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Rules** | ${{ steps.check-changes.outputs.rules_count }} | Processed .list files |" >> $GITHUB_STEP_SUMMARY
          echo "| **JSON** | ${{ steps.check-changes.outputs.json_count }} | Sing-box JSON configs |" >> $GITHUB_STEP_SUMMARY
          echo "| **SRS** | ${{ steps.check-changes.outputs.srs_count }} | Compiled binary rulesets |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | ${{ steps.check-changes.outputs.changed_files }} | Files changed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📁 Directory Structure:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "repository/" >> $GITHUB_STEP_SUMMARY
          echo "├── Rules/rules/      # Processed rule files" >> $GITHUB_STEP_SUMMARY
          echo "├── json/             # Sing-box JSON configs" >> $GITHUB_STEP_SUMMARY
          echo "└── srs/              # Compiled binary rulesets" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🚀 Usage Examples:" >> $GITHUB_STEP_SUMMARY
          echo "- **Clash/Surge**: \`https://raw.githubusercontent.com/user/repo/main/Rules/rules/{name}.list\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Sing-box JSON**: \`https://raw.githubusercontent.com/user/repo/main/json/{name}.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Sing-box Binary**: \`https://raw.githubusercontent.com/user/repo/main/srs/{name}.srs\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📝 Processed Rule Sets:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.check-changes.outputs.rule_names }}" | tr ' ' '\n' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          rm -rf .cache/singbox.tar.gz 2>/dev/null || true
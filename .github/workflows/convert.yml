name: Rules Converter

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  convert-rules:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: src
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq
          pip3 install pyyaml
          
          # Improved mihomo download with retries and verification
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempting to download mihomo (attempt $i of $MAX_RETRIES)"
            latest_url=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.assets[] | select(.name | test("mihomo-linux-amd64.*.gz$")) | .browser_download_url')
            
            if [ -z "$latest_url" ]; then
              echo "Failed to get download URL, retrying..."
              sleep 5
              continue
            fi
            
            # Download to temporary file first
            if curl -sfL "$latest_url" -o mihomo.gz; then
              # Verify gzip file integrity
              if gzip -t mihomo.gz 2>/dev/null; then
                gzip -d mihomo.gz
                if [ -f mihomo ] && [ -s mihomo ]; then
                  chmod +x mihomo
                  sudo mv mihomo /usr/local/bin/
                  echo "Successfully installed mihomo"
                  break
                fi
              else
                echo "Downloaded file is corrupted, retrying..."
                rm -f mihomo.gz mihomo
              fi
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "::error::Failed to download and install mihomo after $MAX_RETRIES attempts"
              exit 1
            fi
            
            sleep 5
          done
          
          mkdir -p src/{ipcidr,domain}

      - name: Process Rules
        run: |
          cd src

          download_and_process() {
            local rule="$1"
            local url="$2"
            local max_retries=3
            
            echo "ðŸ”„ Processing: $rule"
            
            for attempt in $(seq 1 $max_retries); do
              echo "Download attempt $attempt of $max_retries: $url"
              
              if curl -sfL --connect-timeout 10 --max-time 30 -o "${rule}.origin" "$url"; then
                if [[ "$url" == *.yaml ]]; then
                  if python3 -c "
                    import yaml, sys
                    try:
                      with open('${rule}.origin') as f:
                        data = yaml.safe_load(f)
                        if 'payload' in data:
                          print('\n'.join(data['payload']))
                    except Exception as e:
                      print(f'Error processing YAML: {e}', file=sys.stderr)
                      exit(1)
                  " > "${rule}.tmp"; then
                    rm "${rule}.origin"
                  else
                    echo "::error::YAML processing failed for $rule"
                    rm -f "${rule}.origin" "${rule}.tmp"
                    continue
                  fi
                else
                  mv "${rule}.origin" "${rule}.tmp"
                fi

                if [[ "$rule" == ipcidr/* ]]; then
                  if ! mihomo convert-ruleset ipcidr text "${rule}.tmp" "${rule}.mrs"; then
                    echo "::error::Ruleset conversion failed for $rule"
                    rm -f "${rule}.tmp"
                    continue
                  fi
                else
                  sed -i '
                    /^[[:space:]]*$/d;
                    s/^full://g;
                    s/^DOMAIN-SUFFIX,//g;
                    s/^DOMAIN,//g;
                  ' "${rule}.tmp"

                  if awk '!seen[tolower($0)]++' "${rule}.tmp" | sort -f > "${rule}.processed"; then
                    if ! mihomo convert-ruleset domain text "${rule}.processed" "${rule}.mrs"; then
                      echo "::error::Domain ruleset conversion failed for $rule"
                      rm -f "${rule}.tmp" "${rule}.processed"
                      continue
                    fi
                  fi
                fi

                rm -f "${rule}.tmp" "${rule}.processed"
                echo "âœ… Successfully processed: $rule"
                return 0
              fi
              
              echo "Download failed, retrying in 5 seconds..."
              sleep 5
            done
            
            echo "::error::Failed to process $rule after $max_retries attempts"
            return 1
          }

          declare -A RULES=(
            ["domain/ai"]="https://github.com/DustinWin/ruleset_geodata/raw/mihomo-ruleset/ai.list"
            ["domain/cn"]="https://github.com/DustinWin/ruleset_geodata/raw/mihomo-ruleset/cn.list"
            ["domain/fake_ip"]="https://github.com/juewuy/ShellCrash/raw/dev/public/fake_ip_filter.list"
            ["domain/private"]="https://github.com/ForestL18/rules-dat/raw/mihomo/geo/domain/private-domain.list"
            ["domain/paypal"]="https://github.com/MetaCubeX/meta-rules-dat/raw/meta/geo/geosite/paypal.yaml"
            ["ipcidr/privateip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/geo/ipcidr/private-ip.list"
            ["ipcidr/cnip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/China-ASN-combined.list"
            ["ipcidr/telegramip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/Telegram-ASN-combined.list"
            ["ipcidr/googleip"]="https://github.com/ForestL18/rules-dat/raw/mihomo/asn/combined/Google-ASN-combined.list"
          )

          failed=0
          for rule in "${!RULES[@]}"; do
            if ! download_and_process "$rule" "${RULES[$rule]}"; then
              failed=1
            fi
          done

          exit $failed

      - name: Commit Changes
        if: success()
        run: |
          cd src
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add ipcidr/*.mrs domain/*.mrs
          if ! git diff-index --quiet HEAD; then
            git commit -m "chore: Update rules $(date +'%Y-%m-%d %H:%M')" 
            git push origin HEAD:${{ github.ref }}
          fi
